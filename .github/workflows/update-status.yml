name: "üîÑ Update Status with ETH Price Movement"

on:
  schedule:
    # Runs every hour at the 0th minute.
    - cron: '0 * * * *'
  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:

jobs:
  update-status:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Install jq.
      - name: Install dependencies
        run: sudo apt-get install -y jq

      # Step 2: Fetch ETH market data.
      - name: Fetch ETH market data
        id: market
        run: |
          DATA=$(curl -s 'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=ethereum')
          PRICE=$(echo "$DATA" | jq -r '.[0].current_price')
          PCT_CHANGE=$(echo "$DATA" | jq -r '.[0].price_change_percentage_24h')
          
          if [[ "$(echo "$PCT_CHANGE" | cut -c1)" == "-" ]]; then
            ARROW="üîª"
          else
            ARROW="üî∫"
          fi
          
          PCT_FMT=$(printf "%.2f%%" "$PCT_CHANGE")
          
          echo "price=$PRICE" >> $GITHUB_OUTPUT
          echo "pct_fmt=$PCT_FMT" >> $GITHUB_OUTPUT
          echo "arrow=$ARROW" >> $GITHUB_OUTPUT

      # Step 3: Update GitHub Status with enhanced error logging.
      - name: Update GitHub Status (with debug output)
        env:
          GITHUB_TOKEN: ${{ secrets.USER_BIO_TOKEN }}
        run: |
          STATUS_MESSAGE="ETH: ${{ steps.market.outputs.price }} USD (${{ steps.market.outputs.pct_fmt }})"
          STATUS_EMOJI="${{ steps.market.outputs.arrow }}"
          
          echo "‚úèÔ∏è Attempting to set status to: \"$STATUS_MESSAGE\" with emoji: $STATUS_EMOJI"
          
          read -r -d '' QUERY <<-'EOF'
            mutation($message: String!, $emoji: String!) {
              changeUserStatus(input: {
                message: $message,
                emoji: $emoji
              }) {
                status {
                  message
                }
              }
            }
          EOF

          echo "---"
          echo "DEBUG: Running gh command with full error logging..."
          echo "---"
          
          # This command is modified for debugging.
          # 1. We redirect stderr to stdout (2>&1) to capture all output.
          # 2. We add '|| true' so the step doesn't fail, allowing us to see the error.
          gh api graphql \
            -f query="$QUERY" \
            -f message="$STATUS_MESSAGE" \
            -f emoji="$STATUS_EMOJI" 2>&1 || true
            
          echo "---"
          echo "DEBUG: Command finished. If there was an error, it should be visible above."
          echo "---"
