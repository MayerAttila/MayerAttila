name: "üîÑ Update Status with ETH Price Movement"

on:
  schedule:
    - cron: '0 * * * *'   # every hour at minute 0
  workflow_dispatch:

jobs:
  update-status:
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Fetch ETH market data
        id: market
        run: |
          DATA=$(curl -s 'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=ethereum')
          PRICE=$(echo "$DATA" | jq -r '.[0].current_price')
          PCT=$(echo "$DATA" | jq -r '.[0].price_change_percentage_24h')
          DOLLAR=$(echo "$DATA" | jq -r '.[0].price_change_24h')
          if [[ "$PCT" == -* ]]; then ARROW="üîª"; else ARROW="üî∫"; fi
          PCT_FMT=$(printf "%.2f%%" "$PCT")
          DOLLAR_FMT=$(printf "%.2f" "$DOLLAR")
          echo "üöÄ Price: $PRICE, Change: $PCT_FMT, $DOLLAR_FMT, Arrow: $ARROW"
          echo "price=$PRICE" >> $GITHUB_OUTPUT
          echo "pct=$PCT_FMT" >> $GITHUB_OUTPUT
          echo "dollar=$DOLLAR_FMT" >> $GITHUB_OUTPUT
          echo "arrow=$ARROW" >> $GITHUB_OUTPUT

      - name: Debug: show GraphQL variables
        run: |
          echo "üß∞ Variables:"
          echo "price=${{ steps.market.outputs.price }}"
          echo "pct=${{ steps.market.outputs.pct }}"
          echo "dollar=${{ steps.market.outputs.dollar }}"
          echo "arrow=${{ steps.market.outputs.arrow }}"

      - name: Update GitHub Status via GraphQL
        env:
          GITHUB_TOKEN: ${{ secrets.USER_BIO_TOKEN }}
        run: |
          PRICE=${{ steps.market.outputs.price }}
          PCT=${{ steps.market.outputs.pct }}
          DOLLAR=${{ steps.market.outputs.dollar }}
          ARROW=${{ steps.market.outputs.arrow }}
          MSG="ETH: $ARROW $PCT (\$$DOLLAR)"
          echo "‚úèÔ∏è Setting status: $MSG"
          read -r -d '' QUERY <<-'EOF'
          mutation($msg: String!, $emoji: String!) {
            changeUserStatus(input: {
              message: $msg,
              emoji: $emoji,
              limitedAvailability: false
            }) {
              status {
                message
                emoji
              }
            }
          }
          EOF
          RESPONSE=$(curl -s -X POST https://api.github.com/graphql \
            -H "Authorization: bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$(jq -n --arg query "$QUERY" --arg msg "$MSG" --arg emoji "$ARROW" '{query: $query, variables: {msg: $msg, emoji: $emoji}}')" \
            -w "\n%{http_code}")
          echo "üì® Response: $RESPONSE"
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          echo "Status code: $HTTP_CODE"
          echo "Body: $BODY"
          if [[ "$HTTP_CODE" != "200" ]]; then
            echo "::error ::GraphQL mutation failed with status $HTTP_CODE"
            exit 1
          fi
