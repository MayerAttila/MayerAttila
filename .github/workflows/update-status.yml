name: "üîÑ Update Status with ETH Price Movement"

on:
  schedule:
    - cron: '0 * * * *' # Every hour at the 0th minute.
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab.

jobs:
  # This is the main job that updates your status with the ETH price.
  update-status:
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Fetch ETH market data
        id: market
        run: |
          DATA=$(curl -s 'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=ethereum')
          PRICE=$(echo "$DATA" | jq -r '.[0].current_price')
          PCT=$(echo "$DATA" | jq -r '.[0].price_change_percentage_24h')
          
          if [[ "$(echo "$PCT" | cut -c1)" == "-" ]]; then
            ARROW="üîª"
          else
            ARROW="üî∫"
          fi
          
          PCT_FMT=$(printf "%.2f%%" "$PCT")
          
          echo "price=$PRICE" >> $GITHUB_OUTPUT
          echo "pct_fmt=$PCT_FMT" >> $GITHUB_OUTPUT
          echo "arrow=$ARROW" >> $GITHUB_OUTPUT

      - name: Update GitHub Status via GraphQL
        env:
          # This token MUST have the 'user:write' scope.
          GITHUB_TOKEN: ${{ secrets.USER_BIO_TOKEN }}
        run: |
          ARROW="${{ steps.market.outputs.arrow }}"
          PCT_FMT="${{ steps.market.outputs.pct_fmt }}"
          PRICE="${{ steps.market.outputs.price }}"
          
          # A simplified, safe status message.
          MSG="ETH: ${{ steps.market.outputs.price }} USD (${{ steps.market.outputs.pct_fmt }})"
          EMOJI="${{ steps.market.outputs.arrow }}" # Use the raw emoji character

          echo "‚úèÔ∏è Setting status message to: $MSG"
          echo "‚úèÔ∏è Setting emoji to: $EMOJI"

          read -r -d '' QUERY <<-'EOF'
          mutation($msg: String!, $emoji: String!) {
            changeUserStatus(input: { message: $msg, emoji: $emoji }) {
              status { message emoji }
            }
          }
          EOF
          
          JSON_PAYLOAD=$(jq -n --arg query "$QUERY" --arg msg "$MSG" --arg emoji "$EMOJI" \
            '{query: $query, variables: {msg: $msg, emoji: $emoji}}')
            
          echo "---"
          echo "DEBUG: Sending the following JSON payload:"
          echo "$JSON_PAYLOAD"
          echo "---"

          RESPONSE=$(curl -s -X POST https://api.github.com/graphql \
            -H "Authorization: bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD" \
            -w "\n%{http_code}")
            
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          
          echo "---"
          echo "DEBUG: Response Body from GitHub:"
          echo "$BODY"
          echo ""
          echo "DEBUG: HTTP Status Code: $HTTP_CODE"
          echo "---"
          
          if [[ "$HTTP_CODE" != "200" ]]; then
            echo "::error::GraphQL mutation failed. Status Code: $HTTP_CODE. See response body above for details."
            exit 1
          fi

          echo "‚úÖ Status updated successfully!"

  # This is a diagnostic job. If the main job fails, enable this to test your token.
  # To enable it, change `if: false` to `if: true`
  simple-test:
    runs-on: ubuntu-latest
    # This job is disabled by default. Change to "if: true" to run it.
    if: false
    steps:
      - name: Run a minimal, hardcoded status update
        env:
          GITHUB_TOKEN: ${{ secrets.USER_BIO_TOKEN }}
        run: |
          MSG="This is a test."
          EMOJI="‚úÖ"
          
          read -r -d '' QUERY <<-'EOF'
          mutation($msg: String!, $emoji: String!) {
            changeUserStatus(input: { message: $msg, emoji: $emoji }) {
              status { message emoji }
            }
          }
          EOF

          JSON_PAYLOAD=$(jq -n --arg query "$QUERY" --arg msg "$MSG" --arg emoji "$EMOJI" \
            '{query: $query, variables: {msg: $msg, emoji: $emoji}}')
            
          echo "---"
          echo "DEBUG (Simple Test): Sending payload:"
          echo "$JSON_PAYLOAD"
          echo "---"
            
          RESPONSE=$(curl -s -X POST https://api.github.com/graphql \
            -H "Authorization: bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD" \
            -w "\n%{http_code}")

          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')

          echo "---"
          echo "DEBUG (Simple Test): Response Body:"
          echo "$BODY"
          echo "DEBUG (Simple Test): HTTP Status Code: $HTTP_CODE"
          echo "---"

          if [[ "$HTTP_CODE" != "200" ]]; then
            echo "::error::Simple Test Failed! This strongly indicates a problem with your GITHUB_TOKEN permissions."
            exit 1
          fi

          echo "‚úÖ Simple Test Succeeded!"
