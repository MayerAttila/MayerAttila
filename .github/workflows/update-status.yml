# .github/workflows/update-eth-status.yml
# This version has the corrected logic to display the absolute price change.

name: Update GitHub Status with ETH Trend

on:
  schedule:
    # This schedule runs the workflow every day at midnight UTC.
    - cron: "0 0 * * *"
  # This allows you to run the workflow manually from the Actions tab on GitHub.
  workflow_dispatch:

jobs:
  update-status:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Fetch the last 24 hours of price data from the CoinGecko API.
      - name: Fetch ETH price data (last 24h)
        id: prices
        run: |
          JSON_DATA=$(curl -s 'https://api.coingecko.com/api/v3/coins/ethereum/market_chart?vs_currency=usd&days=1')
          PRICE_OLD=$(echo $JSON_DATA | jq -r '.prices[0][1]')
          PRICE_NEW=$(echo $JSON_DATA | jq -r '.prices[-1][1]')

          echo "old=$PRICE_OLD" >> $GITHUB_OUTPUT
          echo "new=$PRICE_NEW" >> $GITHUB_OUTPUT

          echo "Fetched prices -> 24h Ago: $PRICE_OLD, Current: $PRICE_NEW"

      # Step 2: Calculate all values and format the status message correctly.
      - name: Compare prices and set status
        id: status
        run: |
          PRICE_OLD=${{ steps.prices.outputs.old }}
          PRICE_NEW=${{ steps.prices.outputs.new }}

          # Use a single, robust awk command to handle all calculations and formatting.
          awk -v new="$PRICE_NEW" -v old="$PRICE_OLD" '
          BEGIN {
              # 1. Calculate the absolute dollar change
              price_change_absolute = new - old;

              # 2. Calculate the percentage change
              if (old > 0) {
                  percent_change = (price_change_absolute / old) * 100;
              } else {
                  percent_change = 0;
              }

              # 3. Determine the trend, emoji, and the sign for the message
              if (price_change_absolute >= 0) {
                  emoji = ":chart_with_upwards_trend:";
                  sign = "+";
              } else {
                  emoji = ":chart_with_downwards_trend:";
                  # The negative sign is already part of the number, so no sign is needed
                  sign = ""; 
              }

              # 4. Construct the final, correct message string
              # Format: ETH: $CurrentPrice (+$AbsoluteChange / +PercentageChange%)
              message = sprintf("ETH: $%.2f (%s$%.2f / %s%.2f%%)", new, sign, price_change_absolute, sign, percent_change);

              # 5. Print the key=value pairs for the GITHUB_OUTPUT file
              print "emoji=" emoji;
              print "message=" message;
          }
          ' >> $GITHUB_OUTPUT # Append the output of awk directly to the file

          # Log the planned status for easier debugging
          echo "Status to be set -> $(grep 'emoji' $GITHUB_OUTPUT | cut -d'=' -f2) $(grep 'message' $GITHUB_OUTPUT | cut -d'=' -f2)"

      # Step 3: Send the update to the GitHub GraphQL API to change your user status.
      - name: Update GitHub profile status
        env:
          GH_TOKEN: ${{ secrets.USER_BIO_TOKEN }}
        run: |
          # Construct the GraphQL mutation payload using jq.
          GRAPHQL_PAYLOAD=$(jq -n \
            --arg emoji "${{ steps.status.outputs.emoji }}" \
            --arg message "${{ steps.status.outputs.message }}" \
            '{
              "query": "mutation($status: ChangeUserStatusInput!) { changeUserStatus(input: $status) { clientMutationId } }",
              "variables": {
                "status": {
                  "emoji": $emoji,
                  "message": $message,
                  "limitedAvailability": false
                }
              }
            }')

          # Send the mutation to the GitHub GraphQL API endpoint.
          curl \
            --fail -X POST \
            -H "Authorization: bearer $GH_TOKEN" \
            -H "Content-Type: application/json" \
            https://api.github.com/graphql \
            -d "$GRAPHQL_PAYLOAD"
